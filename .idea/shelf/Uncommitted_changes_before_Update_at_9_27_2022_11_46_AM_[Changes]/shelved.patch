Index: src/ISA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class ISA {\r\n\r\n\r\n    public short byte_short(byte a , byte b){\r\n//        if(a < 0 && b < 0)\r\n//            return (short)(Integer.parseInt(String.valueOf(a  + 256)) + Integer.parseInt(String.valueOf(b  + 256)));\r\n//        else if (a > 0 && b < 0)\r\n//            return (short)(Integer.parseInt(String.valueOf(a)) + Integer.parseInt(String.valueOf(b  + 256)));\r\n//        else if(a < 0 && b > 0)\r\n//            return (short)(Integer.parseInt(String.valueOf(a  + 256)) + Integer.parseInt(String.valueOf(b)));\r\n//        else if(a > 0 && b > 0)\r\n//            return (short)(Integer.parseInt(String.valueOf(a)) + Integer.parseInt(String.valueOf(b)));\r\n\r\n\r\n        return (short)(Byte.toUnsignedInt(a) + Byte.toUnsignedInt(b));\r\n    }\r\n    public void Reset_carryBit() {\r\n        SPRs.set_flag(4);\r\n    }\r\n\r\n    public void set_carryBit() {\r\n        SPRs.set_flag(0);\r\n    }\r\n\r\n    public void set_ZeroBit() {\r\n        SPRs.set_flag(1);\r\n    }\r\n\r\n    public void set_SignBit() {\r\n        SPRs.set_flag(2);\r\n    }\r\n\r\n    public void set_overflowBit() {\r\n        SPRs.set_flag(3);\r\n    }\r\n\r\n    public void setting_flag(int index) {\r\n        if (Short.toUnsignedInt(GPRS.gprs[index]) < 0) {\r\n            set_SignBit();\r\n        } else if (Short.toUnsignedInt(GPRS.gprs[index]) == 0) {\r\n            set_ZeroBit();\r\n        }\r\n    }\r\n\r\n    public void Move(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n//        System.out.println(\"abc\");\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n\r\n        GPRS.gprs[index_1 ] = GPRS.gprs[index_2 ];\r\n        setting_flag(index_2 );\r\n    }\r\n\r\n    public void Add(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n\r\n        if (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]) > 65536) {\r\n            set_overflowBit();\r\n        } else {\r\n            GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));\r\n            setting_flag(index_1 - 1);\r\n        }\r\n    }\r\n\r\n    public void Sub(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void Mul(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n\r\n        if ((Short.toUnsignedInt(GPRS.gprs[index_1 ]) * Short.toUnsignedInt(GPRS.gprs[index_2 ])) > 65536) {\r\n            set_overflowBit();\r\n        } else {\r\n            GPRS.gprs[index_1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1]) * Short.toUnsignedInt(GPRS.gprs[index_2]));\r\n            setting_flag(index_1);\r\n        }\r\n    }\r\n\r\n    public void Div(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) / Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));\r\n        setting_flag(index_1 - 1);\r\n\r\n    }\r\n\r\n    public void And(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) & Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void Or(String R1, String R2) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        int index_2 = Integer.parseInt(R2);\r\n        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) | Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void Movi(String R1,short num){\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        GPRS.gprs[index_1 ] = (short) (Short.toUnsignedInt(num));\r\n        setting_flag(index_1 );\r\n    }\r\n\r\n\r\n    public void Addi(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        if ((Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(num)) > 65536) {\r\n            set_overflowBit();\r\n        } else {\r\n            GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(num));\r\n            setting_flag(index_1 - 1);\r\n        }\r\n    }\r\n\r\n    public void Subi(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) - Short.toUnsignedInt(num));\r\n        setting_flag(index_1 - 1);\r\n\r\n    }\r\n\r\n    public void Muli(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n        if ((Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) * Short.toUnsignedInt(num)) > 65536) {\r\n            set_overflowBit();\r\n        } else {\r\n            GPRS.gprs[index_1 - 1] = (short) ((Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) * Short.toUnsignedInt(num)));\r\n            setting_flag(index_1 - 1);\r\n        }\r\n    }\r\n\r\n    public void Divi(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n        GPRS.gprs[index_1 - 1] = (short) ((Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) / Short.toUnsignedInt(num)));\r\n        setting_flag(index_1 - 1);\r\n\r\n    }\r\n\r\n    public void Andi(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n        GPRS.gprs[index_1 - 1] = (short) (GPRS.gprs[index_1 - 1] & num);\r\n        setting_flag(index_1 - 1);\r\n\r\n    }\r\n\r\n    public void Ori(String R1, short num) {\r\n        Reset_carryBit(); // if negative and carry then?????\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n        GPRS.gprs[index_1 - 1] = (short) (GPRS.gprs[index_1 - 1] * num);\r\n        setting_flag(index_1 - 1);\r\n\r\n    }\r\n\r\n\r\n    public void BZ(short num) {\r\n        if (SPRs.get_flag() == 1) {\r\n            Memory.cc =Memory.cc + num;\r\n        }\r\n    }\r\n\r\n    public void BNZ(short num) {\r\n        if (SPRs.get_flag() != 1) {\r\n            Memory.cc = Memory.cc + num;\r\n        }\r\n    }\r\n\r\n    public void BC(short num) {\r\n        if (SPRs.get_flag() == 0) {\r\n            Memory.cc = Memory.cc + num;\r\n        }\r\n    }\r\n\r\n    public void BS(short num) {\r\n        if (SPRs.get_flag() == 0) {\r\n            Memory.cc = Memory.cc + num;\r\n        }\r\n    }\r\n\r\n    public void JMP(short num) {\r\n        Memory.cc = Memory.cc + num;\r\n    }\r\n\r\n\r\n//    public void MOVL(String R1) {\r\n//        int index_1 = Integer.parseInt(R1);\r\n//\r\n//        GPRS.gprs[index_1 - 1] = Byte.valueOf((byte) (Memory.memory[Memory.pc] + Memory.memory[Memory.pc + 1])); // issue is how to put 2 bytes in 1 byte instance of an array gprs\r\n//    }\r\n\r\n\r\n    public void MOVL(String R1 , int x )// x shouldnt be a multiple of 2 (add check)\r\n    {\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n        GPRS.gprs[index_1 - 1] = byte_short( Memory.memory[ SPRs.code_reg[2] + x], Memory.memory[SPRs.code_reg[2] +x + 1]);\r\n    }\r\n\r\n    public void MOVS(String R1, int offset )\r\n    {\r\n        Reset_carryBit();\r\n        int index_1 = Integer.parseInt(R1);\r\n        String temp = String.valueOf(GPRS.gprs[index_1 - 1]);\r\n        String[] arr = new String[temp.length()];\r\n        for (int i = 0; i < temp.length(); i++) {\r\n            arr = temp.split(\"\");\r\n        }\r\n        String s1 = \"\";\r\n        String s2 = \"\";\r\n        switch (arr.length) {\r\n            case 1:\r\n                s1 = \"00\";\r\n                s2 = \"0\" + arr[0];\r\n                break;\r\n\r\n            case 2:\r\n                s1 = \"00\";\r\n                s2 = arr[0] + arr[1];\r\n                break;\r\n            case 3:\r\n                s1 = \"0\" + arr[0];\r\n                s2 = arr[1] + arr[2];\r\n                break;\r\n            case 4:\r\n                s1 = arr[0] + arr[1];\r\n                s2 = arr[2] + arr[3];\r\n                break;\r\n        }\r\n\r\n        Memory.memory[SPRs.code_reg[2] + offset] = Byte.valueOf(s1);\r\n        SPRs.code_reg[2]++;\r\n        Memory.memory[SPRs.code_reg[2] + offset+ 1] = Byte.valueOf(s2);\r\n        SPRs.code_reg[2]++;\r\n\r\n        setting_flag(GPRS.gprs[index_1-1]);\r\n    }\r\n\r\n    public void SHL(String R1){\r\n        int index_1 = Integer.parseInt(R1);\r\n        if((GPRS.gprs[index_1-1] & 0x8000) == 0x8000 )\r\n        {\r\n            set_carryBit();\r\n        }\r\n        GPRS.gprs[index_1-1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1-1]) << 1);\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void SHR(String R1){\r\n        int index_1 = Integer.parseInt(R1);\r\n\r\n//        if(((GPRS.gprs[index_1-1] )  >> 1) > 0)\r\n//            GPRS.gprs[index_1-1] = (short)((GPRS.gprs[index_1-1] )  << 1);\r\n//\r\n//        else if(((GPRS.gprs[index_1-1] )  << 1) < 0){\r\n//            GPRS.gprs[index_1-1] = (short)(((GPRS.gprs[index_1-1] )  << 1)+32768);\r\n//        }\r\n\r\n        GPRS.gprs[index_1-1] = (short) ((short)(Short.toUnsignedInt(GPRS.gprs[index_1-1]) >> 1)& 0x0FFF); // ensures that the most sig bit is 0\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void RTL(String R1){\r\n        int index_1 = Integer.parseInt(R1);\r\n        if((GPRS.gprs[index_1-1] & 0x8000) == 0x8000 )\r\n        {\r\n            set_carryBit();\r\n        }\r\n        if(Short.toUnsignedInt(GPRS.gprs[index_1-1]) >=  32768){\r\n//            set_carryBit();\r\n            GPRS.gprs[index_1-1] = (short)((GPRS.gprs[index_1-1] << 1)  + 1);\r\n        }\r\n        else{\r\n            GPRS.gprs[index_1-1] = (short)(GPRS.gprs[index_1-1]<<1);\r\n        }\r\n        setting_flag(index_1 -1);\r\n    }\r\n\r\n    public void RTR(String R1){\r\n        int index_1 = Integer.parseInt(R1);\r\n        if(Short.toUnsignedInt(GPRS.gprs[index_1]) %2 == 1 && Short.toUnsignedInt(GPRS.gprs[index_1]) < 32768){\r\n//            System.out.println(Byte.toUnsignedInt((byte)((a>>1) + 32768)));\r\n            GPRS.gprs[index_1-1] = (short) (GPRS.gprs[index_1-1] + 32768);\r\n//            a = (byte)((a >> 1)  + 128);\r\n//            System.out.println(a);\r\n        }\r\n        else if(Short.toUnsignedInt(GPRS.gprs[index_1]) >=32768 && Short.toUnsignedInt(GPRS.gprs[index_1]) %2 == 1 ){\r\n            GPRS.gprs[index_1-1] =  (short)((GPRS.gprs[index_1-1]>>1));\r\n        }\r\n        else if(Short.toUnsignedInt(GPRS.gprs[index_1]) >=32768 && Short.toUnsignedInt(GPRS.gprs[index_1]) %2 == 0 ){\r\n            GPRS.gprs[index_1-1] =  (short)((GPRS.gprs[index_1-1]>>1) & 0x7FFF);\r\n        }\r\n        else{\r\n            GPRS.gprs[index_1-1] =  (short)((GPRS.gprs[index_1-1]>>1));\r\n        }\r\n    }\r\n\r\n    public void INC(String R1){\r\n        Reset_carryBit();\r\n        int index_1 = Integer.parseInt(R1);\r\n        if((GPRS.gprs[index_1-1]&0xFFFF) == 0xFFFF)\r\n            set_overflowBit();\r\n        else\r\n        GPRS.gprs[index_1-1] = (short)(Short.toUnsignedInt(GPRS.gprs[index_1-1]) + 1);\r\n\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void DEC(String R1){\r\n        Reset_carryBit();\r\n        int index_1 = Integer.parseInt(R1);\r\n        GPRS.gprs[index_1-1] = (short)(Short.toUnsignedInt(GPRS.gprs[index_1-1]) - 1);\r\n\r\n        setting_flag(index_1 - 1);\r\n    }\r\n\r\n    public void NOOP()\r\n    {\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ISA.java b/src/ISA.java
--- a/src/ISA.java	
+++ b/src/ISA.java	
@@ -57,11 +57,11 @@
         int index_1 = Integer.parseInt(R1);
         int index_2 = Integer.parseInt(R2);
 
-        if (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]) > 65536) {
+        if (Short.toUnsignedInt(GPRS.gprs[index_1]) + Short.toUnsignedInt(GPRS.gprs[index_2]) > 65536) {
             set_overflowBit();
         } else {
-            GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));
-            setting_flag(index_1 - 1);
+            GPRS.gprs[index_1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1]) + Short.toUnsignedInt(GPRS.gprs[index_2]));
+            setting_flag(index_1);
         }
     }
 
@@ -69,8 +69,8 @@
         Reset_carryBit(); // if negative and carry then?????
         int index_1 = Integer.parseInt(R1);
         int index_2 = Integer.parseInt(R2);
-        GPRS.gprs[index_1 - 1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1 - 1]) + Short.toUnsignedInt(GPRS.gprs[index_2 - 1]));
-        setting_flag(index_1 - 1);
+        GPRS.gprs[index_1] = (short) (Short.toUnsignedInt(GPRS.gprs[index_1]) + Short.toUnsignedInt(GPRS.gprs[index_2]));
+        setting_flag(index_1);
     }
 
     public void Mul(String R1, String R2) {
